apiVersion: v1
kind: Namespace
metadata: {name: sock-shop}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-db
  labels: {name: carts-db}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: carts-db}
  template:
    metadata:
      labels: {name: carts-db}
    spec:
      containers:
      - name: carts-db
        # mongo:latest
        image: mongo@sha256:401ae88210c708d54873af22df618b46a5f3d2da1c2676d115326b205ec78d3f
        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop: [all]
            add: [CHOWN, SETGID, SETUID]
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir: {medium: Memory}
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  labels: {name: carts-db}
  namespace: sock-shop
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector: {name: carts-db}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels: {name: carts}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: carts}
  template:
    metadata:
      labels:
        name: carts
    spec:
      containers:
      - name: carts
        # weaveworksdemos/carts:0.4.8
        image: weaveworksdemos/carts@sha256:434d2f5a6e0e8beef1f253fe96f45b8437a703125fc003434c5282ecf8969a4f
        ports:
         - containerPort: 80
        env:
         - name: ZIPKIN
           value: zipkin.jaeger.svc.cluster.local
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop: [all]
            add: [NET_BIND_SERVICE]
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir: {medium: Memory}
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: carts
  labels: {name: carts}
  namespace: sock-shop
spec:
  ports:
  - port: 80
    targetPort: 80
  selector: {name: carts}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue-db
  labels: {name: catalogue-db}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: catalogue-db}
  template:
    metadata:
      labels: {name: catalogue-db}
    spec:
      containers:
      - name: catalogue-db
        # weaveworksdemos/catalogue-db:0.3.0
        image: weaveworksdemos/catalogue-db@sha256:7ba74ec9adf88f6625b8d85d3323d1ee5232b39877e1590021ea485cf9457251
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: fake_password
        - name: MYSQL_DATABASE
          value: socksdb
        ports:
        - name: mysql
          containerPort: 3306
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue-db
  labels: {name: catalogue-db}
  namespace: sock-shop
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector: {name: catalogue-db}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  labels: {name: catalogue}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: catalogue}
  template:
    metadata:
      labels: {name: catalogue}
    spec:
      containers:
      - name: catalogue
        # weaveworksdemos/catalogue:0.3.5
        image: weaveworksdemos/catalogue@sha256:0147a65b7116569439eefb1a6dbed455fe022464ef70e0c3cab75bc4a226b39b
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop: [all]
            add: [NET_BIND_SERVICE]
          readOnlyRootFilesystem: true
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  labels: {name: catalogue}
  namespace: sock-shop
spec:
  ports:
  - port: 80
    targetPort: 80
  selector: {name: catalogue}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: front-end}
  template:
    metadata:
      labels: {name: front-end}
    spec:
      containers:
      - name: front-end
        # weaveworksdemos/front-end:0.3.12
        image: weaveworksdemos/front-end@sha256:26a2d9b6b291dee2dca32fca3f5bff6c2fa07bb5954359afcbc8001cc70eac71
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: &front-end-port 8079
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop: [all]
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            path: /
            port: *front-end-port
          periodSeconds: 20
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  labels: {name: front-end}
  namespace: sock-shop
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8079
    protocol: TCP
  selector: {name: front-end}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
  labels: {name: orders-db}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: orders-db}
  template:
    metadata:
      labels: {name: orders-db}
    spec:
      containers:
      - name: orders-db
        # mongo:latest
        image: mongo@sha256:401ae88210c708d54873af22df618b46a5f3d2da1c2676d115326b205ec78d3f
        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop: [all]
            add: [CHOWN, SETGID, SETUID]
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir: {medium: Memory}
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  labels: {name: orders-db}
  namespace: sock-shop
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector: {name: orders-db}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels: {name: orders}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: orders}
  template:
    metadata:
      labels: {name: orders}
    spec:
      containers:
      - name: orders
        # weaveworksdemos/orders:0.4.7
        image: weaveworksdemos/orders@sha256:b622e40e83433baf6374f15e076b53893f79958640fc6667dff597622eff03b9
        env:
         - name: ZIPKIN
           value: zipkin.jaeger.svc.cluster.local
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop: [all]
            add: [NET_BIND_SERVICE]
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir: {medium: Memory}
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels: {name: orders}
  namespace: sock-shop
spec:
  ports:
  - port: 80
    targetPort: 80
  selector: {name: orders}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels: {name: payment}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: payment}
  template:
    metadata:
      labels:
        name: payment
    spec:
      containers:
      - name: payment
        # weaveworksdemos/payment:0.4.3
        image: weaveworksdemos/payment@sha256:5ab1c9877480a018d4dda10d6dfa382776e6bca9fc1c60bacbb80903fde8cfe0
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop: [all]
            add: [NET_BIND_SERVICE]
          readOnlyRootFilesystem: true
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  labels: {name: payment}
  namespace: sock-shop
spec:
  ports:
  - port: 80
    targetPort: 80
  selector: {name: payment}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-master
  labels: {name: queue-master}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: queue-master}
  template:
    metadata:
      labels: {name: queue-master}
    spec:
      containers:
      - name: queue-master
        # weaveworksdemos/queue-master:0.3.1
        image: weaveworksdemos/queue-master@sha256:6292d3095f4c7aeed8d863527f8ef6d7a75d3128f20fc61e57f398c100142712
        ports:
        - containerPort: 80
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  labels: {name: queue-master}
  annotations:
    prometheus.io/path: "/prometheus"
  namespace: sock-shop
spec:
  ports:
  - port: 80
    targetPort: 80
  selector: {name: queue-master}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels: {name: rabbitmq}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: rabbitmq}
  template:
    metadata:
      labels: {name: rabbitmq}
    spec:
      containers:
      - name: rabbitmq
        # rabbitmq:3.6.8
        image: rabbitmq@sha256:a9f4923559bbcd00b93b02e61615aef5eb6f1d1c98db51053bab0fa6b680db26
        ports:
        - containerPort: 5672
        securityContext:
          capabilities:
            drop: [all]
            add: [CHOWN, SETGID, SETUID, DAC_OVERRIDE]
          readOnlyRootFilesystem: true
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels: {name: rabbitmq}
  namespace: sock-shop
spec:
  ports:
  - port: 5672
    targetPort: 5672
  selector: {name: rabbitmq}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  labels: {name: shipping}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: shipping}
  template:
    metadata:
      labels: {name: shipping}
    spec:
      containers:
      - name: shipping
        # weaveworksdemos/shipping:0.4.8
        image: weaveworksdemos/shipping@sha256:983305c948fded487f4a4acdeab5f898e89d577b4bc1ca3de7750076469ccad4
        env:
         - name: ZIPKIN
           value: zipkin.jaeger.svc.cluster.local
         - name: JAVA_OPTS
           value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop: [all]
            add: [NET_BIND_SERVICE]
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir: {medium: Memory}
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  labels: {name: shipping}
  namespace: sock-shop
spec:
  ports:
  - port: 80
    targetPort: 80
  selector: {name: shipping}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db
  labels: {name: user-db}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: user-db}
  template:
    metadata:
      labels: {name: user-db}
    spec:
      containers:
      - name: user-db
        # weaveworksdemos/user-db:0.4.0
        image: weaveworksdemos/user-db@sha256:b43f0f8a76e0c908805fcec74d1ad7f4af4d93c4612632bd6dc20a87508e0b68
        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop: [all]
            add: [CHOWN, SETGID, SETUID]
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir: {medium: Memory}
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: user-db
  labels: {name: user-db}
  namespace: sock-shop
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector: {name: user-db}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  labels: {name: user}
  namespace: sock-shop
spec:
  replicas: 1
  selector:
    matchLabels: {name: user}
  template:
    metadata:
      labels: {name: user}
    spec:
      containers:
      - name: user
        # weaveworksdemos/user:0.4.7
        image: weaveworksdemos/user@sha256:2ffccc332963c89e035fea52201012208bf62df43a55fe461ad6598a5c757ab7
        ports:
        - containerPort: 80
        env:
        - name: MONGO_HOST
          value: user-db:27017
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop: [all]
            add: [NET_BIND_SERVICE]
          readOnlyRootFilesystem: true
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: user
  labels: {name: user}
  namespace: sock-shop
spec:
  ports:
  - port: 80
    targetPort: 80
  selector: {name: user}